#!/bin/bash
set -eu
start=$SECONDS
VERSIONnr=1.4
DEMULTIPLEX=no
QSCORE=10
LENGTH=300
MAXLENGTH=100000
CLUSTERING=0.8
RECLUSTER=no
WORDLENGTH=5
MEDAKA=no
VARIANT=no
CLUSTERSIZE=100
BLASTDB=no
BLASTdir=no
CLUSTERinfo=no
FOLDER_STRUCTURE=no
MULTITHREAD=8
Kmer=15
CLUSTERmax=no
integer=^[0-9]+$
OTUcall=no
gADAPT=FALSE
aADAPT=FALSE
Input_path=FALSE

usage() {
  echo "Usage: $0
  -h    help
  -v    version
  -T    multithreading default 4
  -p    plot readlength distribution histogram (plots then exits program)
  -i    Input path
  -f    folder structure: your fastq files are already demultiplexed and stored in barcode folders (such as output from Mk1C)
Filtering:
  -d    DEMULTIPLEX
  -q    quality score
  -l    minimum length (if used in combination with adapter/primer removal this is the length AFTER removal)
  -m    maximum length (if used in combination with adapter/primer removal this is the length AFTER removal))
  -a    Reverse adapter: (reverse complemented!):Regular 3' adapter/primer ie: -a '"'TGRTTYTTYGGNCAYCCNGARGTNTA;max_error_rate=0.1;min_overlap=22'"'
  -g    Forward adapter: Regular 5' adapter/primer ie: -g '"'GGWACWGGWTGAACWGTWTAYCCYCC;max_error_rate=0.1;min_overlap=20'"' 
        Linked adapter: -g '"'GGWACWGGWTGAACWGTWTAYCCYCC;max_error_rate=0.1;min_overlap=20...TGRTTYTTYGGNCAYCCNGARGTNTA;max_error_rate=0.1;min_overlap=22'"' 
        (See Cutadapt: cutadapt.readthedocs.io)
Clustering
  -c    clustering percentage, 0.8 = 80% identity
  -w    clustering wordlength
  -n    clustersize default 100
  -r    re-cluster consensus sequences (use a second round of clustering)
  -o    Call OTU's at %, -o 0.98 calls OTU's at 98% sequence similarity of consensus sequences across barcodes
  -R    Randomly subsample clusters till maximum size of n
  -k    kmer length
Polishing
  -M    polish consensus with Medaka
  -s    snip/variant calling with Medaka
BLAST
  -B    yourblastdatabase.fasta
  -b    /path/to/existing/blast/database/existing-data-base-file.fasta
 "  1>&2
}

exit_abnormal() {
  usage
  exit 1
}

while getopts "hdq:l:m:c:w:n:MvB:b:i:prfsT:g:a:R:k:o:" options; do
    case "${options}" in
    h)
        usage
        exit 1
        ;;
    v)
        echo "This is Decona $VERSIONnr"
        exit 1
        ;;
    d)
        DEMULTIPLEX="yes"
        ;;
    q)
        QSCORE=${OPTARG}
        if ! [[ $QSCORE =~ $integer ]] ; then
        echo "Error: QSCORE must be a positive, whole number."
        exit 1
        elif [ "$QSCORE" -eq "0" ]; then
        echo "Error: QSCORE must be greater than zero."
        exit 1
        fi
        ;;
    l)
        LENGTH=${OPTARG}
        if ! [[ $LENGTH =~ $integer ]] ; then
        echo "Error: Minimum length must be a positive, whole number."
        exit 1
        elif ! [ "$LENGTH" -ge "30" ]; then
        echo "Error: Minimum length should be 100 bp or longer. Decona is developed for longer reads and may not work properly when using shorter reads."
        exit 1
        fi
        ;;
    o)
        OTUcall=${OPTARG}
        ;;
    m)
        MAXLENGTH=${OPTARG}
        ;;
    c)
        CLUSTERING=${OPTARG}
        ;;
    w)
        WORDLENGTH=${OPTARG}
        ;;
    n)
        CLUSTERSIZE=${OPTARG}
        if ! [ $CLUSTERSIZE -ge "5" ] ; then
        echo "Please set a cluster size -n of at least 5. Smaller clusters may not be resolved properly and can cause Decona to get stuck."
        exit 1
        fi
        ;;
    M)
        MEDAKA="yes"
        ;;
    s)
        VARIANT="yes"
        ;;
    R)
        CLUSTERmax=${OPTARG}
        if ! [[ $CLUSTERmax =~ $integer ]] ; then
        echo "Error: Maximum cluster size -R must be a positive, whole number."
        exit 1
        elif [ "$CLUSTERmax" -eq "0" ]; then
        echo "Error: Maximum cluster size -R must be greater than zero."
        exit 1
        fi
        ;;
    k)
        Kmer=${OPTARG}
        if ! [[ $Kmer =~ $integer ]] ; then
        echo "Error: Kmer size -k must be a positive, whole number."
        exit 1
        elif [ "$Kmer" -eq "0" ]; then
        echo "Error: Kmer size -k must be greater than zero."
        exit 1
        fi
        ;;
    B)
        BLASTDB=${OPTARG}
        if ! [[ $BLASTDB = *.fasta ]] ; then
        echo "-B: to create your blast database input files should be in .fasta format"
        exit 1
        fi
        ;;
    b)
        BLASTdir=${OPTARG}
        ;;
    i)
        Input_path=${OPTARG}
        if ! [ -d $Input_path ] ; then
        echo "Input error: "$Input_path", no such directory"
        exit 1
        fi
        ;;
    p)  # plot readlength distribution from fastq files
        awk 'NR%4 == 2 {lengths[length($0)]++} END {for (l in lengths) {print l, lengths[l]}}' *.fastq | sort -n | perl -lane 'print $F[0], "\t", "*" x ($F[1] / 100)' | awk 'NF >= 2'
        exit 1
        ;;
    T)
        MULTITHREAD=${OPTARG}
        if ! [[ $LENGTH =~ $integer ]] ; then
        echo "Error: Multithread -T must be a positive, whole number."
        exit 1
        fi
        ;;
    g)
        gADAPT=${OPTARG}
        ;;
    a)
        aADAPT=${OPTARG}
        ;;
    r)
        RECLUSTER="yes"
        ;;
    f)
        FOLDER_STRUCTURE="yes"
        ;;
    :)
        echo "Error: -${OPTARG} requires an argument."
        exit_abnormal
        ;;
    *)
        exit_abnormal
        ;;
    esac
done

if [ $Input_path = FALSE ]; then
echo "Input error: please specify input folder"
exit 1
fi

if ! [ "$LENGTH" -ge "300" ] && [ "$Kmer" -ge "15" ] ; then
echo "Waring: When using a short fragment (<300 bases) please adjust kmer length ( -k ) accordingly"
exit_abnormal
fi

if ! [[ $BLASTDB = "no" ]] ; then
  [ -d BLASTdatabase ] || mkdir BLASTdatabase
  (
    mv "$BLASTDB" BLASTdatabase
    cd BLASTdatabase ;
    makeblastdb -in $BLASTDB -dbtype nucl -parse_seqids ;
    pwd > BlastDBlocation;
  )
BLASTdir=$(<BLASTdatabase/BlastDBlocation)/$BLASTDB
echo "new blast database created in:  $BLASTdir"
fi

blast_function () {
    echo "blasting $blast_file"
    blastn -query "$blast_file" -db "$BLASTdir" -outfmt "7 qseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen sseqid salltitles sallseqid" -max_target_seqs 15 -max_hsps 500 -num_threads "$MULTITHREAD" > "$blast_file"_out || echo "Error with Blast" | tee -a Decona_logfile.txt ;
    #summary file
    for result in *_out ; do
    cat "$result"  | sed 's/# Query: //' | sed '/^#/d'| sort -n -r -k2 | sort -u -k1,1  | sed 's/^/'"$result"'\t/' | sed 's/reclusterd_fastas_//' | sed 's/.fasta_out//' | \
    sed 's/.fasta/\t/g' | sed 's/|/\t/g' | awk '{print $1,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$2}' | sed 's/ /\t/g' >> All_summary.txt
    done
    
    #Rscript_input
    for result in "$blast_file"_out ; do
    Total_ReadCount=$(cat "$blast_file" | grep "^>" | cut -d "-" -f3 | awk '{SUM+=$1}END{print SUM}');
    cat "$blast_file"_out | sed 's/# Query: //' | sed '/^#/d' | sed 's/^/'"$Total_ReadCount"'\t/' | sed 's/^/'"$blast_file"'\t/' | sed 's/all_reclusterd_fastas_//' | sed 's/reclusterd_fastas_//' | \
    sed 's/.fasta//g' | sed 's/medakas_//' | sed 's/polisheds_//' | sed 's/_concatenated//' | awk '{print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16}' | sed 's/ /\t/g' >> finalblastoutput.txt
    done
}

if [ $FOLDER_STRUCTURE = "yes" ] ; then
cd "$Input_path"    
mkdir data
    for folder in * ; do
    if [ -d "$folder" ] ; then
    (
    cd "$folder" || exit ;
    if [ `ls -1 *.fastq 2>/dev/null | wc -l ` -gt 0 ]; then
    cat *.fastq > "$folder"_concatenated.fastq ;
    mv "$folder"_concatenated.fastq .. ;
    fi
    )
    fi
    done
    mv *_concatenated.fastq data
    cd data/
fi

### Creating Decona log file ###
NanoFiltVersion=$(NanoFilt -v || :)
MinimapVersion=$(minimap2 --version || :)
RaconVersion=$(racon --version || :)
MedakaVersion=$(medaka --version || :)
BlastnVersion=$(blastn -version || :)
WorkDir=$(pwd)
now=$(date +'%d/%B/%Y %R')

echo "
Decona logfile, date "$now"
Run in folder "$WorkDir"
Decona version: "$VERSIONnr"
--------------------------

### Dependency versions ###
"$NanoFiltVersion"
Minimap2 "$MinimapVersion"
Racon: "$RaconVersion"
"$MedakaVersion"
"$BlastnVersion"
--------------------------

### Settings used ###
Input folder: "$Input_path"
Demultiplex: "$DEMULTIPLEX"
Minimum Q score filter: "$QSCORE"
Minimum read length filter: "$LENGTH"
Maximun read length filter: "$MAXLENGTH"
Cluster threshold percentage: "$CLUSTERING"
Reclustering: "$RECLUSTER"
Wordlength: "$WORDLENGTH"
Polish with Medaka: "$MEDAKA"
Call variants with Medaka: "$VARIANT"
Minimum cluster size to keep: "$CLUSTERSIZE"
Make blast database from fasta: "$BLASTDB"
Use existing blast database: "$BLASTdir"
Raw fastq files are stored in multiple folders: "$FOLDER_STRUCTURE"
Multithread: "$MULTITHREAD" threads 
Kmer length: "$Kmer"
Randomly subsample large cluster to: "$CLUSTERmax" reads maximum
Call OTU's at: "$OTUcall"
Cut adapters with cutadapt: "$gADAPT"
Cut adapters with cutadapt: "$aADAPT"
--------------------------
"  > Decona_logfile.txt


if [ $DEMULTIPLEX == "yes" ] ; then
#Filter data on size and quality with NanoFilt
    raw_seq="$(cat *.fastq | grep "runid" | wc -l)"
    mkdir temporary_filtered
    echo "Filtering data..."
    cat *.fastq | NanoFilt -q "$QSCORE" -l "$LENGTH" --maxlength "$MAXLENGTH" > temporary_filtered/Q"$QSCORE"_filt.fastq
    echo "Data filtered with NanoFilt"

    for folder in ./temporary_filtered ; do
    if [ -e "$folder" ] ; then
    filtered_seq="$(cat "$folder"/*_filt.fastq | grep "runid" | wc -l)"
    echo "total raw sequences = $raw_seq"
    echo "total filtered sequences = $filtered_seq"
        (
        cd "$folder" || exit ;
            mv *.fastq ..
        )
    fi
    done
    rm -r temporary_filtered

    # Demultiplex wit qcat
    echo "Demultiplexing..."
    cat *_filt.fastq | qcat --min-score 65 --detect-middle --trim -b demultiplexed_data -t "$MULTITHREAD"

    cd demultiplexed_data || exit
    echo "Data demultiplexed, working directory changed to: " pwd ;

    #loop to transform fastq to fasta
    for file in barcode* ; do
    if [ -e "$file" ] ; then
    cat "$file" | sed -n '1~4 s/^@/>/p; 2~4p' > "${file%%.*}.fasta" ;
    fi
    done ;

    #Files will be placed in a folder acording to fastq name
    for files in barcode*.fast* ; do
    if [ -e "$files" ] ; then
    dir=${files%%.*}
    mkdir -p "$dir"
    mv "$files" "$dir"
    fi
    done

else
    #Filter data on size and quality with NanoFilt
    raw_seq="$(cat *.fastq | grep "runid" | wc -l)"
    mkdir temporary_filtered
    mkdir temporary_filtered2
    for fastq in *.fastq ; do
        echo "$(date +'%d/%B/%Y %R') Filtering data $fastq..." | tee -a Decona_logfile.txt
        if [ "$gADAPT" =  "FALSE" ] && [ "$aADAPT" =  "FALSE" ] ; then
        cat "$fastq" | NanoFilt -q "$QSCORE" -l "$LENGTH" --maxlength "$MAXLENGTH" > temporary_filtered/${fastq}_Q${QSCORE}_filt.fastq
        elif ! [ "$gADAPT" =  "FALSE" ] || ! [ "$aADAPT" =  "FALSE" ] ; then
        cat "$fastq" | NanoFilt -q "$QSCORE" > temporary_filtered/${fastq}_Q${QSCORE}_filt.fastq
        fi
    done
    
    for fastq in *.fastq ; do
        if ! [ "$gADAPT" =  "FALSE" ] && [ "$aADAPT" =  "FALSE" ] ;then
        echo "$gADAPT"
        echo "$aADAPT"
        echo "check"
            cutadapt -g "$gADAPT" --rc --match-read-wildcards --times 50 -j 0 -m "$LENGTH" -M "$MAXLENGTH" --discard-untrimmed -o temporary_filtered2/${fastq}_Q${QSCORE}_filt.fastq temporary_filtered/${fastq}_Q${QSCORE}_filt.fastq ;
        elif [ "$gADAPT" =  "FALSE" ] && ! [ "$aADAPT" =  "FALSE" ] ; then
            cutadapt -a "$aADAPT" --rc --match-read-wildcards --times 50 -j 0 -m "$LENGTH" -M "$MAXLENGTH" --discard-untrimmed -o temporary_filtered2/${fastq}_Q${QSCORE}_filt.fastq temporary_filtered/${fastq}_Q${QSCORE}_filt.fastq ;
        elif ! [ "$gADAPT" =  "FALSE" ] && ! [ "$aADAPT" =  "FALSE" ] ; then
            cutadapt -g "$gADAPT" -a "$aADAPT" --rc --match-read-wildcards --times 50 -j 0 -m "$LENGTH" -M "$MAXLENGTH" --discard-untrimmed -o temporary_filtered2/${fastq}_Q${QSCORE}_filt.fastq temporary_filtered/${fastq}_Q${QSCORE}_filt.fastq
        else echo "adapters/primers $fastq not trimmed"
        cp temporary_filtered/* temporary_filtered2/
    fi
    done
    
    echo "Data not demultiplexed";
    #loop to transform fastq to fasta

    for folder in ./temporary_filtered2 ; do
    if [ -e "$folder" ] ; then
    filtered_seq="$(cat "$folder"/*_filt.fastq | grep "runid" | wc -l)"
    echo "total raw sequences = $raw_seq"
    echo "total filtered sequences = $filtered_seq"
        (
        cd "$folder" || exit ;
            echo "Fastq reads are being transformed to fasta" ;
            for i in *filt.fastq ;  do
            if [ -e "$i" ] ; then
            cat "$i" | sed -n '1~4 s/^@/>/p; 2~4p'  > "${i%%.*}.fasta" ;
            mv *.fasta ..
            fi
            done
            mv *.fastq ..
        )
    else
        for folder in ./temporary_filtered ; do
        if [ -e "$folder" ] ; then
        filtered_seq="$(cat "$folder"/*_filt.fastq | grep "runid" | wc -l)"
        echo "total raw sequences = $raw_seq"
        echo "total filtered sequences = $filtered_seq"
        (
        cd "$folder" || exit ;
            echo "Fastq reads are being transformed to fasta" ;
            for i in *filt.fastq ;  do
            if [ -e "$i" ] ; then
            cat "$i" | sed -n '1~4 s/^@/>/p; 2~4p'  > "${i%%.*}.fasta" ;
            mv *.fasta ..
            fi
            done
            mv *.fastq ..
        )
        fi
        done
    fi
    done

    rm -r temporary_filtered
    rm -r temporary_filtered2

 echo "$(date +'%d/%B/%Y %R') Transforming fastq to fasta Complete" | tee -a Decona_logfile.txt;

    #Files will be placed in a folder acording to fastq name
    for file in *.fast* ; do
    if [ -e "$file" ] ; then
    dir=${file%%.*}
    mkdir -p "$dir"
    mv "$file" "$dir"
    fi
    done



fi

echo "$(date +'%d/%B/%Y %R') Start clustering reads..." | tee -a Decona_logfile.txt ;
# Clustering reads to make a list of most abundant, representative reads
echo "Clustering reads..." ;
for folder in */ ; do
if ! [ "$folder" == "BLASTdatabase/" ] ; then
(
cd "$folder" || exit ;
echo "Clustering $folder..." ;

    for fasta in *.fasta ; do
    if [ -e "$fasta" ] ; then
    # This is the actual clustering command
    cd-hit-est -i "$fasta" -o cluster_representatives -c $CLUSTERING -n "$WORDLENGTH" -d 0 -M 0 -T "$MULTITHREAD" -g 1 > report_"${fasta%.*}.txt";
    mv cluster_representatives cluster_representatives.fa
    # Read distribution will be summarized in report_***.txt within the folder.
    plot_len1.pl *.clstr \
    1,2-4,5-9,10-19,20-49,50-99,100-299,300-499,500-999,1000-1999,2000-2999,3000-3999,4000-4999,5000-5999,6000-6999,7000-7999,8000-8999,9000-9999,10000-100000  \ >> size_report_"$fasta".txt ;
    # Create files with clusters of a certain size
    make_multi_seq.pl *.fasta *.clstr multi-seq "$CLUSTERSIZE" ;
    fi
    done
)
fi
done


echo "$(date +'%d/%B/%Y %R') Building Racon consensus sequences..." | tee -a Decona_logfile.txt ;
# Allign with minimap2 and assemble with Racon
for folder in */ ; do
if [ -e "$folder"/multi-seq ] ; then
(
cd "$folder"/"multi-seq" || exit ;

    for file in * ;  do
    if [ -e "${file}" ] ; then
    #Rename extensionless fasta files: sequencecount-clustername.fa
        if [ "${file}" == "*.*" ];
        then
        continue;
        else
        seq="$(cat "${file}" | grep ">" | wc -l)"
        mv "${file}" "$seq-${file}.fa"
        fi;
    fi
    done
    # # -------------------------- # #
    # # Subsampling large datasets # #
        if ! [ "$CLUSTERmax" = "no" ] ; then
        for file in *.fa ;  do
        awk '{print $1}' < "${file}"| awk '/^>/ {printf("\n%s\n",$0);next; } { printf("%s",$0);} END {printf("\n");}' | awk 'NR>1{ printf("%s",$0); n++; if(n%2==0) { printf("\n");} else { printf("\t");} }' | awk -v k="$CLUSTERmax" 'BEGIN{srand(systime() + PROCINFO["pid"]);}{s=x++<k?x-1:int(rand()*x);if(s<k)R[s]=$0}END{for(i in R)print R[i]}' | awk -F"\t" '{print $1"\n"$2 > "'"subsampled_"$CLUSTERmax"-${file}"'"}'
            for file in subsampled_*.fa ;  do
            if [ -e "${file}" ] ; then
            echo "Aligning and making draft assembly of $file...";
            # Extract 1st fasta of each file as a reference point
            tail -n 2 "${file}" > ref_"${file}"sta;
            # Aligning all data in the cluster to the reference sequence
            minimap2 -ax map-ont -k"$Kmer" ref_"${file}"sta "${file}" -t "$MULTITHREAD" > align_"${file}".sam ;

            #Assemble the clustered sequences.
            # Racon settings optimized for Medaka: -m 8 -x -6 -g -8 -w 500
            racon -m 8 -x -6 -g -8 -w 500 -t "$MULTITHREAD" "${file}" align_"${file}".sam ref_"${file}"sta > polished_"${file}"sta ;
            fi
            done
        done
        fi
    # # ------------------------------- # #

    if [ "$CLUSTERmax" = "no" ] ; then
        for file in *.fa ;  do
        if [ -e "${file}" ] ; then
        echo "Aligning and making draft assembly of $file...";
        # Extract 1st fasta of each file as a reference point
        tail -n 2 "${file}" > ref_"${file}"sta;
        # Aligning all data in the cluster to the reference sequence
        minimap2 -ax map-ont -k"$Kmer" ref_"${file}"sta "${file}" -t "$MULTITHREAD" > align_"${file}".sam ;

        #Assemble the clustered sequences.
        # Racon settings optimized for Medaka: -m 8 -x -6 -g -8 -w 500
        racon -m 8 -x -6 -g -8 -w 500 -t "$MULTITHREAD" "${file}" align_"${file}".sam ref_"${file}"sta > polished_"${file}"sta ;
        fi
        done
    fi
    echo "Done";
)
fi
done


if [ $MEDAKA == "yes" ] ; then
echo "$(date +'%d/%B/%Y %R') Start polishing consensus sequences with Medaka..." | tee -a Decona_logfile.txt ;
     #Polish the Racon secuence with Medaka
    for folder in */ ; do
    if [ -e "$folder"/multi-seq ] ; then
    (
    cd "$folder"/"multi-seq" || exit ;
        for fa in *.fa ;  do
        if [ -s "polished_${fa}sta" ] && ! [ -d consensus_medaka_"$fa" ]; then
        echo "polishing ${fa} Racon sequence with Medaka..."
        medaka_consensus -i "${fa}" -d "polished_${fa}sta" -o "consensus_medaka_${fa}" -t "$MULTITHREAD" || echo "Medaka polishing "${fa}" failed." > failed_polishing_files.txt  ;
        echo "Done polishing ${fa}";
        fi
        done
 
    )
    fi
    done

    #Change names of Medaka consensus to have their cluster's name
    #move them one folder up
    for folder in */ ; do
    if [ -e "${folder}"/multi-seq ] ; then
    (
    cd "${folder}"/"multi-seq" || exit ;
    for folders in consensus_medaka_*; do
    if [ -e "${folders}" ] ; then
    (
        cd "${folders}" || exit ;
        [ ! -f consensus.fasta ] || mv consensus.fasta "${folders}sta"
        [ ! -f "${folders}sta" ] || mv "${folders}sta" ..
    )
    fi
    done
    )
    fi
    done


    #Blast all Medaka assembled sequences, make a summary output of first hit in blast per sequence.
    for folder in * ; do
        if [ -e "$folder"/multi-seq ] ; then
        echo "$(date +'%d/%B/%Y %R') If you are NOT reclustering reads BLAST for Medaka polished sequences should start now..." | tee -a Decona_logfile.txt ;
        (
            cd "$folder"/"multi-seq" || exit ;
            for con in consensus_medaka_*.fasta ; do
                if [ -e "$con" ] ; then
                cat "$con" | awk '{print $1}' > n-"$con" ;
                sed -i ' 1 s/.*/&_'"$con"'/' n-"$con" ;
                sed -i 's/>.*consensus_medaka_/>consensus_medaka-/' n-"$con" ;
                else continue ;
                fi
            done

            if [ `ls -1 n-con*.fasta 2>/dev/null | wc -l ` -gt 0 ]; then
            cat n-con*.fasta >> all_medaka_fastas.fasta ;
            cp all_medaka_fastas.fasta "medaka_fastas_${folder}.fasta" ;        
            fi

            if [[ $RECLUSTER = "no" ]] ; then
            for blast_file in medaka_fastas_${folder}.fasta ; do
            blast_function
            done
            fi
            
        )
        fi
    done


fi


#Blast all Racon assembled sequences, make a summary output of first hit in blast per sequence.

    for folder in * ; do
    if [ -d "$folder"/multi-seq ] ; then
        echo "$(date +'%d/%B/%Y %R') If you are not polishing with Medaka BLAST for Racon assembled sequences should start now..." | tee -a Decona_logfile.txt ;
    (
        cd "$folder"/"multi-seq" || exit ;
        pwd
        for pol in polished_* ; do
          if [ -f "$pol" ] ; then
            cat "$pol" | awk '{print $1}' > n-"$pol" ;
            sed -i ' 1 s/.*/&_'"$pol"'/' n-"$pol" ;
            sed -i 's/>.*polished_/>polished-/' n-"$pol" ;
          fi
        done

        if [ `ls -1 n-pol*.fasta 2>/dev/null | wc -l ` -gt 0 ]; then
            cat n-pol*.fasta > all_polished_fastas.fasta ;
            cp all_polished_fastas.fasta "polished_fastas_${folder}.fasta" ;
        fi
        
        if [[ $MEDAKA = "no" ]] ; then
        for blast_file in polished_fastas_${folder}.fasta ; do
        blast_function
        done
        fi
    )
    fi
    done


# Counting how many sequences ended up in the clusters
for percentage in */report_*.txt ; do
if [ -e "$percentage" ] ; then
echo -n "${percentage%%.*}    " >> percentage_per_barcode.txt || continue
cat "$percentage" | grep -A 0 'total seq: ' | sed 's/total seq: //' >> percentage_per_barcode.txt || continue
fi
done


for clusters in */ ; do
if [ -e "$clusters"/multi-seq ] ; then
(
    cd "$clusters" || exit ;
        parentdir=$(dirname `pwd`)
        (
        for file in multi-seq/polished_*.fasta ; do
            if [ -e $file ] ; then
            echo $file  >> clustercounts.txt
            cat clustercounts.txt | tr "-" "\t" |sed 's/_/\t/' > clustercounts2.txt ;
            else echo "0" >> "$parentdir"/percentage2.txt ;
            fi
        done
        )
        for multi in clustercounts2.txt ; do
        if [ -e $multi ] ; then
            if ! [ "$CLUSTERmax" = "no" ] ; then
            cat clustercounts2.txt | awk '{s+=$4} END {print s}' >> "$parentdir"/percentage2.txt
            else
            cat clustercounts2.txt | awk '{s+=$3} END {print s}' >> "$parentdir"/percentage2.txt
            fi
        rm clustercounts*.txt
        fi
        done
)
fi
done

paste percentage_per_barcode.txt percentage2.txt | column -s $'\t' -t > combined.txt || :
#rm percentage2.txt || :
cat combined.txt | sed 's/demultiplexed_.*report_//' > combined2.txt || :
awk '{$3=sprintf("%d\t(%.2f%%)", $3, ($3/$2)*100)}1' combined2.txt > percentage_per_barcode.txt || :
#rm combined2.txt combined.txt || : 

######################################################################################################
#re-clustering clusters
if [ $RECLUSTER == "yes" ] ; then
MEDAKA="yes"
echo "$(date +'%d/%B/%Y %R') Re-clustering data and making fresh alignments & polish..." | tee -a Decona_logfile.txt ;
for clusters in * ; do
if [ -d "$clusters"/multi-seq ] ; then
(
    cd "$clusters"/multi-seq || exit ;

    #If Medaka polished consensus sequences are made they will be used for re-clustering. If they were not made the Racon sequences are used (not reccomended).
    if [ -e all_medaka_fastas.fasta ] ;
        then
            cd-hit-est -i all_medaka_fastas.fasta -o 2nd_clust.fasta -c 0.99 -n 5 -d 0 -M 0 -T "$MULTITHREAD" -g 1 ;
        elif [ -e all_polished_fastas.fasta ] ;
        then
            cd-hit-est -i all_polished_fastas.fasta -o 2nd_clust.fasta -c 0.99 -n 5 -d 0 -M 0 -T "$MULTITHREAD" -g 1 ;
        else
            echo "folder $clusters does not have multiple clusters larger then $CLUSTERSIZE"
    fi

    #The .clstr file is split into files containing the names of all sequences beloning to the cluster.
    if [ -e 2nd_clust.fasta.clstr ] ; then
        csplit 2nd_clust.fasta.clstr '/^>Cluster/' '{*}' --elide-empty-files -f 2nd_round_ -b "%03d.txt"
        mkdir round2_clusters

        #If the name file contains two or more sequence names the original data will be merged in concatenated_*. Clusters containing only 1 name are good as is.
        for clust2 in *2nd_round_* ; do
        cat "$clust2" | sed 's/>consensus_medaka-/\t/' | sed 's/subsampled_'${CLUSTERmax}'-//' | sed 's/>polished-/\t/' | sed 's/sta.../\t/' | awk '{print $3}' | sed '/^$/d' > 2_"$clust2" ### Added -subsampled
        if [[ $(wc -l <2_"$clust2") -ge 2 ]] ; then
        { xargs cat < 2_"$clust2" ; } > concatenated_"$clust2"
        else
        cat 2_"$clust2" >> good_clusters.txt
        fi
        done

        #Count sequences in file, rename file to contain count.
        for clust3 in concatenated_2nd_round* ; do
        if [ -e "$clust3" ] ; then
        seq="$(cat "$clust3" | grep ">" | wc -l)"
        mv "$clust3" "round2_clusters/$(basename "$seq"-"$clust3" .txt).fa"
        fi
        done


        rm 2nd_round*.txt || continue
        rm 2_2nd_round* || continue
        mv 2nd_* round2_clusters || continue
        if [ -e *concatenated_2nd_round*.fa ] ; then
        mv *concatenated_2nd_round*.fa round2_clusters || continue
        fi


        # Allign with minimap2 and assemble with Racon
        (
        cd round2_clusters || exit ;
        #If subsampling is used the clusters that are now concatenated need to be subsampled again from the original set.
        if ! [ "$CLUSTERmax" = "no" ] ; then
            for file in *concatenated_2nd_round*.fa ;  do
                if [ -f "$file" ] ; then
                awk '{print $1}' < "${file}"| awk '/^>/ {printf("\n%s\n",$0);next; } { printf("%s",$0);} END {printf("\n");}' | awk 'NR>1{ printf("%s",$0); n++; if(n%2==0) { printf("\n");} else { printf("\t");} }' | awk -v k="$CLUSTERmax" 'BEGIN{srand(systime() + PROCINFO["pid"]);}{s=x++<k?x-1:int(rand()*x);if(s<k)R[s]=$0}END{for(i in R)print R[i]}' | awk -F"\t" '{print $1"\n"$2 > "'"subsampled_"$CLUSTERmax"-${file}"'"}'                
                mv "$file" ..
                fi
            done

            for file in subsampled_*.fa ; do
                if [ -f "$file" ] ; then
                echo "Aligning and making draft assembly of $file...";
                # Extract 1st fastq of each file as a reference point
                cat "$file" | head -2 > ref_"$file"sta;
                # Aligning all data in the cluster to the reference sequence
                minimap2 -ax map-ont -k"$Kmer" ref_"$file"sta "$file" -t "$MULTITHREAD" > align_"$file".sam ;
                # Racon settings optimized for Medaka: -m 8 -x -6 -g -8 -w 500
                racon -m 8 -x -6 -g -8 -w 500 -t "$MULTITHREAD" "$file" align_"$file".sam ref_"$file"sta > polished_"$file"sta ;
                fi
                done
            echo "Done";
        else
            for file in *concatenated_2nd_round*.fa ;  do
            if [ -f "$file" ] ; then
            echo "Aligning and making draft assembly of $file...";
            # Extract 1st fastq of each file as a reference point
            cat "$file" | head -2 > ref_"$file"sta;
            # Aligning all data in the cluster to the reference sequence
            minimap2 -ax map-ont -k"$Kmer" ref_"$file"sta "$file" -t "$MULTITHREAD" > align_"$file".sam ;
            # Racon settings optimized for Medaka: -m 8 -x -6 -g -8 -w 500
            racon -m 8 -x -6 -g -8 -w 500 -t "$MULTITHREAD" "$file" align_"$file".sam ref_"$file"sta > polished_"$file"sta ;
            fi
            done
            echo "Done";
        fi


        if [ $MEDAKA == "yes" ] ; then
            for fa in *.fa ;  do
            if [ -f polished_"$fa"sta ] ; then #######
            echo "polishing "$fa" Racon sequence with Medaka..."
            medaka_consensus -i "$fa" -d polished_"$fa"sta -o consensus_medaka_"$fa" -t "$MULTITHREAD" || echo "Medaka polishing "${fa}" failed." > failed_polishing_files.txt  ;
            fi
            done
        fi


        #Change names of Medaka consensus to have their cluster's name
        for folders in consensus_medaka_*; do
        if [ -e "$folders" ] ; then
        (
            cd "$folders" || exit ;
            [ ! -f consensus.fasta ] || mv consensus.fasta "${folders}sta"
            [ ! -f "${folders}sta" ] || mv "${folders}sta" ..
        )
        fi
        done

        for con in consensus_medaka_*.fasta ; do
            if [ -e "$con" ] ; then
            cat "$con" | awk '{print $1}' | sed ' 1 s/.*/&_'"$con"'/' | sed 's/>.*consensus_medaka_/>consensus_medaka-/' > n-"$con" ;
            fi
            done

        for folders in consensus_medaka_*concatenated_2nd* ; do
        if [ -d "$folders" ] ; then
        rm -r "$folders"
        fi
        done

        for file in n-consensus_medaka_*concatenated_* ; do
        if [ -e "$file" ] ; then
        cat "$file" >> new_concatenated_clusters.fasta
        fi
        done

        [ ! -f new_concatenated_clusters.fasta ] || mv new_concatenated_clusters.fasta ..

        )

    fi

    if [ -e "good_clusters.txt" ] ; then
    if [ -e all_medaka_fastas.fasta ] ;
        then grep -A1 -f good_clusters.txt all_medaka_fastas.fasta | sed '/^--$/d' > reclusterd_fastas.fasta ;
        else grep -A1 -f good_clusters.txt all_polished_fastas.fasta | sed '/^--$/d' > reclusterd_fastas.fasta ;
    fi
    fi

    for file in new_concatenated_clusters.fasta ; do
    if [ -e $file ] ; then
    cat "$file" >> reclusterd_fastas.fasta
    fi
    done

    if [ -e reclusterd_fastas.fasta ] ; then
    mv reclusterd_fastas.fasta ..
    fi

)
fi
done
echo "$(date +'%d/%B/%Y %R') Re-clustering and polishing passed" | tee -a Decona_logfile.txt ;

for folder in * ; do
if [ -e "$folder"/multi-seq ] ; then
    (
    cd "$folder" || exit ;
        if [ -e "reclusterd_fastas.fasta" ] ; then
        mv reclusterd_fastas.fasta "reclusterd_fastas_${folder}.fasta" ; 
        fi

    )
fi
done

for clusters in * ; do
if [ -e "$clusters"/multi-seq ] ; then
(
    echo "$(date +'%d/%B/%Y %R') Blasting re-clustered sequences "$clusters"..." | tee -a Decona_logfile.txt ;
    cd "$clusters" || exit
    if [ -e reclusterd_fastas*.fasta ] ; then
    for blast_file in reclusterd_fastas*.fasta ; do
    blast_function || echo "blast error"
    done
    fi

)
fi
done

fi
######################################################################################################

# Variant calling
if [ $VARIANT == "yes" ] ; then

if [ $RECLUSTER == "yes" ] ; then

#Move "good clusters" to 2nd round folder
for folder in */ ; do
if [ -d "$folder"/multi-seq ] ; then
if ! [ $CLUSTERmax == "no" ] ; then
    cat "$folder"/multi-seq/good_clusters.txt | xargs -I name1 mv "$folder"/multi-seq/subsampled_"${CLUSTERmax}"-"name1" "$folder"/multi-seq/round2_clusters
    cat "$folder"/multi-seq/good_clusters.txt | xargs -I name1 mv "$folder"/multi-seq/polished_subsampled_"${CLUSTERmax}"-"name1"sta "$folder"/multi-seq/round2_clusters
else
    cat "$folder"/multi-seq/good_clusters.txt | xargs -I name1 mv "$folder"/multi-seq/"name1" "$folder"/multi-seq/round2_clusters
    cat "$folder"/multi-seq/good_clusters.txt | xargs -I name1 mv "$folder"/multi-seq/polished_"name1"sta "$folder"/multi-seq/round2_clusters
fi
fi
done

for folder in */ ; do
if [ -e "$folder"/multi-seq/round2_clusters ] ; then
    (
        cd "$folder"/multi-seq/round2_clusters || exit ;
        for fa in *.fa ;  do
        if [ -e "$fa" ] && ! [ -d "$fa" ]; then
        echo "working on: ${fa}"
         mkdir variant"${fa}"
        mv "$fa" variant"${fa}"
        mv polished_"${fa}"sta variant"${fa}"
        (
            cd variant"${fa}" || exit ;
            # Medaka needs a SAM input so we create it with minimap
            minimap2 -ax map-ont -k"$Kmer" polished_"$fa"sta "$fa" -t "$MULTITHREAD" > "$fa".sam ;
            # change SAM to BAM
            samtools view -S -b "$fa".sam > "$fa".bam
            #sort .bam file: alignments will occur in “genome order”
            samtools sort "$fa".bam -o "$fa".sorted.bam
            # index SAM file and creact .sam.bai file
            samtools index "$fa".sorted.bam
            #Call variants with medaka
            medaka_variant -f polished_"${fa}"sta -i "${fa}".sorted.bam > report_variant_calling
        )
        else continue ;
        fi
        done
    )
fi
done

else

for folder in */ ; do
if [ -e "$folder"/multi-seq ] ; then
    (
        cd "$folder"/multi-seq || exit ;
        for fa in *.fa ;  do
        if [ -e "$fa" ] && ! [ -d "$fa" ]; then
        echo "working on: ${fa}"
        mkdir variant"${fa}"
        mv "$fa" variant${fa}
        mv polished_"${fa}"sta variant"${fa}"
        (
            cd variant${fa} || exit ;
            # Medaka needs a SAM input so we create it with minimap
            minimap2 -ax map-ont -k"$Kmer" polished_"$fa"sta "$fa" > "$fa".sam ;
            # change SAM to BAM
            samtools view -S -b "$fa".sam > "$fa".bam
            #sort .bam file: alignments will occur in “genome order”
            samtools sort "$fa".bam -o "$fa".sorted.bam
            # index SAM file and creact .sam.bai file
            samtools index "$fa".sorted.bam
            #Call variants with medaka
            medaka_variant -f polished_"${fa}"sta -i "${fa}".sorted.bam > report_variant_calling
        )
        else continue ;
        fi
        done
    )
fi
done

fi
fi

#########################################################################################################
echo "$(date +'%d/%B/%Y %R') Making results folder..." | tee -a Decona_logfile.txt ;
mkdir result
mkdir result/Racon
if [ $MEDAKA == "yes" ] ; then
mkdir result/Medaka
fi
if [ $RECLUSTER == "yes" ] ; then
mkdir result/reclustered
fi
if [ $VARIANT == "yes" ] ; then
mkdir result/variants
fi

for folder in * ; do
if [ -e "$folder"/multi-seq ] ; then
    (
    cd "$folder" || echo "could not find $folder" ;
        #Reclustered
        if [ -e "reclusterd_fastas_$folder.fasta" ] ; then
        mv reclusterd_fastas_$folder.fasta ../result/reclustered/"all_reclusterd_fastas_$folder.fasta" ; fi
        if [ -e finalblastoutput.txt ] && [ $RECLUSTER = "yes" ] ; then
        mv finalblastoutput.txt ../result/reclustered/"finalblastoutput_$folder.txt" ;
        cat ../result/reclustered/finalblastoutput_*.txt >> ../result/reclustered/All_finalblastoutput.txt ;
        cat All_summary.txt >> ../result/reclustered/BLAST_summary.txt ; fi
        #Medaka
        if [ -e /finalblastoutput.txt ] && [ $RECLUSTER = "no" ] && [ $MEDAKA == "yes" ] ; then
        mv finalblastoutput.txt ../result/Medaka/"finalblastoutput_$folder.txt" ;
        cat ../result/Medaka/finalblastoutput_*.txt >> ../result/Medaka/All_finalblastoutput.txt ; 
        cat All_summary.txt >> ../result/Medaka/BLAST_summary.txt ; fi
        #Racon
        if [ -e /finalblastoutput.txt ] && [ $MEDAKA = "no" ] ; then
        mv finalblastoutput.txt ../result/Racon/"finalblastoutput_$folder.txt"
        cat ../result/Racon/finalblastoutput_*.txt >> ../result/Racon/All_finalblastoutput.txt ; 
        cat All_summary.txt >> ../result/Racon/BLAST_summary.txt ; fi

    cd multi-seq || echo "could not find "$folder"/multi-seq" ;
        if [ -e "all_polished_fastas.fasta" ] ; then
        mv all_polished_fastas.fasta ../../result/Racon/"all_racon_fastas_${folder}.fasta" ; fi
        if [ -e "all_medaka_fastas.fasta" ] ; then
        mv all_medaka_fastas.fasta ../../result/Medaka/"all_medaka_fastas_${folder}.fasta" ; fi
    )
    
    
fi
done

for folder in */multi-seq/variant* ; do
if [ -e "$folder" ] ; then
mv "$folder" result/variants
fi
done

for folder in */multi-seq/round2_clusters/variant* ; do
if [ -e "$folder" ] ; then
mv "$folder" result/variants
fi
done

echo "--------------------------------------------"
if [ $CLUSTERinfo == "yes" ] ; then
mv percentage_per_barcode.txt result/percentage_per_barcode.txt
echo "Read info
--------------------------------------------"
echo "Total raw reads: $raw_seq"
echo "Total filtered reads: $filtered_seq"
echo " "
if [ -e result/percentage_per_barcode.txt ] ; then
echo "File - total filtered sequences - sequences in cluster - percentage sequences in cluster"
cat result/percentage_per_barcode.txt
echo " "
else
echo "Unable to retrieve cluster distribution per barcode."
fi
fi

find . -name "*.fai" -type f -print | xargs /bin/rm -f
find . -name "*.mmi" -type f -print | xargs /bin/rm -f
find . -name "*.sam" -type f -print | xargs /bin/rm -f
find . -name "2nd_*" -type f -print | xargs /bin/rm -f
find . -name "consensus_*.fasta" -type f -print | xargs /bin/rm -f
find . -name "polished_*.fasta" -type f -print | xargs /bin/rm -f


if [ $DEMULTIPLEX = "yes" ] ; then
mv result/ ..
cd ..
fi

if [ $FOLDER_STRUCTURE = "yes" ] ; then
mv result/ ..
cd ..
fi

for folder in result/*/ ; do
if [ -d "$folder" ] ; then
    (
    cd "$folder" || echo "could not find $folder" ;
    for file in all_*.fasta ; do
    if [ -f "$file" ] ; then
    cat "$file" |  sed 's/>/&'"$file"'/g' | sed 's/all_reclusterd_fastas_//' | sed 's/all_medaka_fastas_//' | sed 's/all_racon_fastas_//' | sed 's/polished/racon/'| sed 's/consensus_//' | sed 's/.fasta/_/' | sed 's/.fasta//' >> All_barcodes_combined.fasta ;
    fi
    done
    for file in *.txt ; do
    if [ -f "$file" ] ; then
    sed -i 's/ /\t/g' "$file"
    fi
    done
    )
fi
done

for folder in result/*/ ; do
if [ -f "$folder"All_finalblastoutput.txt ] ; then
    if [ -f data/Decona_logfile.txt ] ; then
        echo "$(date +'%d/%B/%Y %R') Running OTU clustering step and Rscript..." | tee -a data/Decona_logfile.txt ; 
    else
        echo "$(date +'%d/%B/%Y %R') Running OTU clustering step and Rscript..." | tee -a Decona_logfile.txt ;
    fi

(
    cd "$folder" || echo "could not find final blast output" ;
    cd-hit-est -i All_barcodes_combined.fasta -o OTUclusters.txt -c "$OTUcall" -n 5 -d 75 -M 0 -T 4 -g 1 

    # The .clstr file is split into files containing the names of all sequences beloning to the cluster/OTU.
    if [ -f OTUclusters.txt ] ; then   
        csplit OTUclusters.txt.clstr '/^>Cluster/' '{*}' --elide-empty-files -f OTU_ -b "%03d.txt"
        for file in OTU_* ; do
        cat "$file" | awk '{print$3}' | sed '/^$/d' | sed 's/...$//' | sed 's/_concatenated//' | sed 's/_medaka-/.*/' | sed 's/>//' > ${file%%.*}
        rm "$file"
        done
    fi

    for file in OTU_* ; do
        grep -f "$file" All_finalblastoutput.txt | sed '/^--$/d' | sed 's/$/\t'"$file"'/g' >> OTUcalled_finalblastoutput.txt
        rm "$file"
    done

    rm OTUclusters.txt || continue
    rm OTUclusters.txt.clstr || continue

)
fi
done


### Write Decona logfile ###
end=$SECONDS
duration=$(( end - start ))
if [ -f data/Decona_logfile.txt ] ; then
    echo "$(date +'%d/%B/%Y %R') Decona total runtime: $duration" | tee -a data/Decona_logfile.txt ; 
else
    echo "$(date +'%d/%B/%Y %R') Decona total runtime: $duration" | tee -a Decona_logfile.txt ;
fi
